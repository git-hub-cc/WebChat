[
  {
    "id": "AI_LiGou_SystemDesign_001",
    "name": "第一章：从零到一 - 如何设计一个系统？",
    "promptModifier": "在敲下第一行代码前，架构师的战争已经开始。本章，我们将建立系统设计的全局观，学习如何通过4S分析法（Scenario, Service, Storage, Scale）来厘清需求，并画出最基础的系统架构图。这是所有复杂设计的起点。"
  },
  {
    "id": "AI_LiGou_SystemDesign_002",
    "name": "第二章：单体地狱 vs 微服务天堂？- 架构模式的演进",
    "promptModifier": "我们将探讨两种核心的架构模式：单体架构与微服务架构。我们将深入分析它们的优缺点、适用场景以及演进路径。重点是理解微服务是如何通过牺牲一致性来换取高可用和可扩展性的。这是一个关键的权衡。"
  },
  {
    "id": "AI_LiGou_SystemDesign_003",
    "name": "第三章：流量入口 - 负载均衡（Load Balancing）",
    "promptModifier": "当一台服务器无法承受流量时，我们就需要负载均衡。本章，我们将学习L4（如Nginx）和L7负载均衡的区别，探讨常见的负载均衡算法（如轮询、最少连接），并理解其在实现高可用和水平扩展中的核心作用。"
  },
  {
    "id": "AI_LiGou_SystemDesign_004",
    "name": "第四章：数据的家 - 数据库选型（SQL vs NoSQL）",
    "promptModifier": "数据是系统的血液。本章，我们将系统性地比较关系型数据库（SQL）和非关系型数据库（NoSQL）的差异。我们将讨论CAP理论和BASE理论，并分析不同业务场景下（如交易、社交、日志）应该如何选择合适的数据库。"
  },
  {
    "id": "AI_LiGou_SystemDesign_005",
    "name": "第五章：为数据库减负(上) - 缓存（Caching）",
    "promptModifier": "缓存是提升系统性能最有效的手段。本章，我们将学习缓存的核心思想，并探讨不同的缓存策略，如Cache-Aside, Read-Through, Write-Through。我们将以Redis为例，讨论缓存的部署模式和经典问题（缓存穿透、雪崩、击穿）。"
  },
  {
    "id": "AI_LiGou_SystemDesign_006",
    "name": "第六章：为数据库减负(下) - 数据库扩展（Sharding）",
    "promptModifier": "当单个数据库的容量或写入达到瓶颈时，我们需要分片（Sharding）。本章我们将学习垂直分片和水平分片的区别，并重点探讨水平分片的策略（如按范围、按哈希）。分片是数据库扩展的终极武器，但它也带来了巨大的复杂性。"
  },
  {
    "id": "AI_LiGou_SystemDesign_007",
    "name": "第七章：异步的艺术 - 消息队列（Message Queue）",
    "promptModifier": "不是所有操作都需要立即得到结果。本章，我们将学习消息队列如何通过异步化来解耦系统、削峰填谷和保证最终一致性。我们将以Kafka或RabbitMQ为例，分析其在订单处理、日志收集等场景下的应用。"
  },
  {
    "id": "AI_LiGou_SystemDesign_008",
    "name": "第八章：全球一张网 - 内容分发网络（CDN）",
    "promptModifier": "如何让全球用户都能快速访问你的静态资源？答案是CDN。本章我们将揭示CDN的工作原理，理解它如何通过边缘节点缓存和智能路由，来大幅降低延迟、减轻源站压力。这是所有大型网站的标配。"
  },
  {
    "id": "AI_LiGou_SystemDesign_009",
    "name": "第九章：寻找你的信息 - 搜索引擎的设计",
    "promptModifier": "如何设计一个像谷歌或百度那样的搜索引擎？本章我们将探讨搜索引擎的核心技术：网络爬虫、倒排索引（Inverted Index）和相关性排序算法（如TF-IDF）。这是一个涉及信息检索、大数据和机器学习的综合性课题。"
  },
  {
    "id": "AI_LiGou_SystemDesign_010",
    "name": "第十章：案例分析 - 设计一个Twitter/微博",
    "promptModifier": "现在，我们开始实战演练。本章我们将从零开始，设计一个功能类似Twitter的信息流系统。我们将重点讨论“Feed流”的“推模式”与“拉模式”的权衡，以及如何处理关注关系和海量读写。"
  },
  {
    "id": "AI_LiGou_SystemDesign_011",
    "name": "第十一章：案例分析 - 设计一个短链接服务（TinyURL）",
    "promptModifier": "看似简单的短链接服务，背后却隐藏着精妙的设计。本章，我们将设计一个高可用的短链接生成和查询系统。我们将探讨如何生成不重复的短码，以及如何利用哈希和分布式ID生成器来应对海量请求。"
  },
  {
    "id": "AI_LiGou_SystemDesign_012",
    "name": "第十二章：案例分析 - 设计一个网约车平台（Uber/滴滴）",
    "promptModifier": "网约车平台是地理位置服务（LBS）的典型应用。本章，我们将分析其核心挑战：如何高效匹配附近的司机和乘客。我们将讨论地理哈希（GeoHash）的应用，以及如何处理司机位置的实时更新和订单状态机。"
  },
  {
    "id": "AI_LiGou_SystemDesign_013",
    "name": "第十三章：通信的抉择 - API设计（REST vs GraphQL vs gRPC）",
    "promptModifier": "服务之间如何优雅地对话？本章我们将对比当今主流的三种API设计风格：RESTful, GraphQL, 和gRPC。我们将分析它们各自的哲学、优缺点和适用场景，帮助你在微服务通信中做出明智的选择。"
  },
  {
    "id": "AI_LiGou_SystemDesign_014",
    "name": "第十四章：系统的眼睛 - 监控与可观测性",
    "promptModifier": "一个没有监控的系统就像一架在夜间不开灯的飞机。本章我们将探讨可观测性的三大支柱：指标（Metrics）、日志（Logging）和追踪（Tracing）。你将理解如何构建一个有效的监控体系，来快速发现和定位问题。"
  },
  {
    "id": "AI_LiGou_SystemDesign_015",
    "name": "第十五章：架构师的成长之路",
    "promptModifier": "技术之外，架构师还需要什么？本章，我们聊一些“软”的东西：技术视野、沟通能力、文档编写和影响力。我将分享一些我的经验，关于如何从一名优秀的工程师，成长为一名合格的架构师。"
  },
  {
    "id": "AI_LiGou_SystemDesign_016",
    "name": "第十六章：终极挑战 - 开放式系统设计面试",
    "promptModifier": "是时候检验你的所学了。在本章，我将给你一个开放性的题目，例如‘设计一个Netflix’或‘设计一个微信朋友圈’。你需要在限定时间内，阐述你的设计思路、技术选型和权衡。这将是一次完整的架构师思维演练。祝你好运。"
  }
]